from model.hallucination_data_generator.hallucination_data_generator import *
from model.triplet_generator.triplet_generator import TripletGenerator


class LLMHallucinationDataGenerator(HallucinationDataGenerator):
    """
    This class contains hallucination pipelines to generate hallucination data.

    Methods:
    __init__(self, config: dict)
        Initializes the data generator with the given configuration.

    hlcntn_directions(self)
        Property that returns a list of directions for generating hallucination data.

    get_model_prompt(self, reference_documents, question, **kwargs)
        Generates a model prompt for hallucinated data generation based on reference documents and a question.

    hlcntn_prompt_input_formatter(self, reference_documents, question)
        Formats the input for the hallucination prompt.

    get_hlcntn_triplet_extraction_prompt(self, non_hallucinated_answer, generated_answer, non_hallucinated_triplets, answer_triplets)
        Generates a prompt for extracting triplets from hallucinated data.

    hlcntn_triplet_extraction_input_formatter(self, non_hallucinated_answer, generated_answer, non_hallucinated_triplets, answer_triplets)
        Formats the input for the hallucination triplet extraction prompt.

    generate_hlcntn_data_from_original_dataset(self, original_dataset, triplet_generator)
        Generates hallucinated data from the original dataset using a triplet generator.

    get_hlcntn_triplet_index(self, generated_non_hlcntn_answer, generated_hlcntn_answer, non_hlcntn_triplets, hlcntn_triplets)
        Extracts the index of hallucinated triplets from the generated answers.

    parse_hlcntn_data_generation_output(self, hlcntn_data_generation_output)
        Parses the output of the hallucinated data generation to extract non-hallucinated and hallucinated answers, and the hallucinated part.

    parse_hlcntn_extraction_output(self, hlcntn_extraction_output)
        Parses the output of the hallucination extraction to get the index of hallucinated triplets.

    Note:
        hallucination dataset looks like this:
        {
            "question_id" : {
                "generated_non_hlcntn_answer": "generated_non_hlcntn_answer",
                "generated_answer": "hallucination answer",
                "non_hlcntn_triplets":[triplet_1, triplet_2, ...],
                "answer_triplets":[triplet_1, triplet_2, ...], \\the hallucinated answer triplets
                "hlcntn_triplet_index": [boolean list of len(answer_triplets) where True indicates the triplet is hallucinated],
                "hlcntn_part: str, \\string description of the hallucinated part of the answer
                "reference_documents": list of reference documents
                }
        }
    """

    def __init__(self, config: dict, logger: logging.Logger):
        super().__init__(config, logger)

    @property
    def hlcntn_directions(self):
        return [
            "Follow the instructions",
        ]

    def get_model_prompt(self, reference_documents: list, question: str, **kwargs):
        """
        Generates a model prompt for hallucinated data generation.

        Args:
            reference_documents (list of str): A list of reference documents to be used in the prompt.
            question (str): The question to be answered by the model.
            **kwargs: Additional keyword arguments.

        Returns:
            str: The generated model prompt.
        """
        return self.message_list_template["hallucinated_data_generation_test"].invoke(
            input=self.hlcntn_prompt_input_formatter(reference_documents, question)
        )

    def hlcntn_prompt_input_formatter(self, reference_documents: list, question: str):
        """
        Formats the input for hallucination prompt.

        Args:
            reference_documents (list of str): A list of reference documents.
            question (str): The question to be asked.

        Returns:
            dict: A dictionary containing formatted directions, reference documents, and the question.
        """
        return {
            "directions": "\n".join(self.hlcntn_directions),
            "reference_documents": "\n- ".join(reference_documents),
            "question": question,
        }

    def get_hlcntn_triplet_extraction_prompt(
        self,
        non_hallucinated_answer: str,
        generated_answer: str,
        non_hallucinated_triplets: list,
        answer_triplets: list,
    ):
        """
        Generates a prompt for extracting hallucination triplets from the given answers and triplets.

        Args:
            non_hallucinated_answer (str): The correct, non-hallucinated answer.
            generated_answer (str): The answer generated by the model, which may contain hallucinations.
            non_hallucinated_triplets (list): A list of triplets extracted from the non-hallucinated answer.
            answer_triplets (list): A list of triplets extracted from the generated answer.

        Returns:
            str: A formatted prompt for hallucination triplet extraction.
        """
        return self.message_list_template[
            "hallucination_triplet_extraction_test"
        ].invoke(
            input=self.hlcntn_triplet_extraction_input_formatter(
                non_hallucinated_answer=non_hallucinated_answer,
                generated_answer=generated_answer,
                non_hallucinated_triplets=non_hallucinated_triplets,
                answer_triplets=answer_triplets,
            )
        )

    def hlcntn_triplet_extraction_input_formatter(
        self,
        non_hallucinated_answer: str,
        generated_answer: str,
        non_hallucinated_triplets: list,
        answer_triplets: list,
    ):
        """
        Formats the input for hallucination triplet extraction prompt.

        Args:
            non_hallucinated_answer (str): The non-hallucinated answer.
            generated_answer (str): The generated (potentially hallucinated) answer.
            non_hallucinated_triplets (list): A list of triplets from the non-hallucinated answer.
            answer_triplets (list): A list of triplets from the generated answer.

        Returns:
            dict: A dictionary containing the formatted input with keys:
                - "answer": The non-hallucinated answer.
                - "hallucinated_answer": The generated answer.
                - "answer_triplets": The string representation of the answer triplets.
        """
        return {
            "answer": non_hallucinated_answer,
            "hallucinated_answer": generated_answer,
            "answer_triplets": str(answer_triplets),
        }

    def generate_hlcntn_data_from_original_dataset(
        self, original_dataset: dict, triplet_generator: TripletGenerator
    ):
        """
        Generates hallucination data from the original dataset using a triplet generator.

        Args:
            original_dataset (dict): The original dataset containing reference documents and questions.
            triplet_generator (object): An object capable of generating triplets from answers.

        Returns:
            dict: A dictionary containing the following keys:
                - "generated_non_hlcntn_answer" (str): The generated non-hallucinated answer.
                - "generated_hlcntn_answer" (str): The generated hallucinated answer.
                - "generated_answer" (str): The raw output from the model invocation.
                - "non_hlcntn_triplets" (list): Triplets generated from the non-hallucinated answer.
                - "answer_triplets" (list): Triplets generated from the hallucinated answer.
                - "hlcntn_triplet_index" (list): The list of boolean values indicating which triplets are hallucinated.
                - "hlcntn_part" (str): The part of the answer identified as hallucinated.
                - "reference_documents" (list): The reference documents from the original dataset.
        """

        hlcntn_generation_prompt = self.get_model_prompt(
            reference_documents=original_dataset["reference_documents"],
            question=original_dataset["question"],
        )
        hlcntn_data_generation_output = self.model.invoke(
            hlcntn_generation_prompt
        ).content

        generated_non_hlcntn_answer, generated_hlcntn_answer, hlcntn_part = (
            self.parse_hlcntn_data_generation_output(hlcntn_data_generation_output)
        )

        non_hlcntn_triplets = triplet_generator.forward(generated_non_hlcntn_answer)
        hlcntn_triplets = triplet_generator.forward(generated_hlcntn_answer)

        hlcntn_triplet_index = self.get_hlcntn_triplet_index(
            generated_non_hlcntn_answer=generated_non_hlcntn_answer,
            generated_hlcntn_answer=generated_hlcntn_answer,
            non_hlcntn_triplets=non_hlcntn_triplets,
            hlcntn_triplets=hlcntn_triplets,
        )

        return {
            "generated_non_hlcntn_answer": generated_non_hlcntn_answer,
            "generated_hlcntn_answer": generated_hlcntn_answer,
            "generated_answer": hlcntn_data_generation_output,
            "non_hlcntn_triplets": non_hlcntn_triplets,
            "answer_triplets": hlcntn_triplets,  # todo
            "hlcntn_triplet_index": hlcntn_triplet_index,
            "hlcntn_part": hlcntn_part,
            "hlcntn_generation_prompt": str(hlcntn_generation_prompt),
            "reference_documents": original_dataset["reference_documents"],
        }

    def get_hlcntn_triplet_index(
        self,
        generated_non_hlcntn_answer: str,
        generated_hlcntn_answer: str,
        non_hlcntn_triplets: list,
        hlcntn_triplets: list,
    ) -> list:
        """
        Generates the boolean list which indicates whether each triplet in the answer is hallucinated.

        Args:
            generated_non_hlcntn_answer (str): The generated non-hallucinated answer.
            generated_hlcntn_answer (str): The generated hallucinated answer.
            non_hlcntn_triplets (list): A list of non-hallucinated triplets.
            hlcntn_triplets (list): A list of hallucinated triplets.

        Returns:
            list: A boolean list of the same length as the answer triplets, where True indicates a hallucinated triplet.
        """
        hlcntn_generation_prompt = self.get_hlcntn_triplet_extraction_prompt(
            non_hallucinated_answer=generated_non_hlcntn_answer,
            generated_answer=generated_hlcntn_answer,
            non_hallucinated_triplets=non_hlcntn_triplets,
            answer_triplets=hlcntn_triplets,
        )
        hlcntn_extraction_output = self.model.invoke(hlcntn_generation_prompt).content
        hlcntn_index = self.parse_hlcntn_extraction_output(hlcntn_extraction_output)
        return hlcntn_index

    def parse_hlcntn_data_generation_output(
        self, hlcntn_data_generation_output: str
    ) -> tuple[str, str, str]:
        """
        Parses the hallucination data generation output and extracts the non-hallucinated answer,
        hallucinated answer, and hallucinated details.

        Args:
            hlcntn_data_generation_output (str): The output string from the hallucination data generation process.

        Returns:
            tuple: A tuple containing:
                - non_hlcntn_answer (str): The non-hallucinated answer extracted from the output.
                - hlcntn_answer (str): The hallucinated answer extracted from the output.
                - hlcntn_part (str): The hallucinated details extracted from the output.
        """
        try:
            answer_part = hlcntn_data_generation_output.split("Hallucinated Details:")[
                0
            ]
            hlcntn_part = hlcntn_data_generation_output.split("Hallucinated Details:")[
                1
            ]
            hlcntn_answer = answer_part.split("Hallucinated Answer:\n")[2].replace(
                "*", ""
            )
            non_hlcntn_answer = answer_part.split("Hallucinated Answer:\n")[1].replace(
                "Non-Hallucinated Answer:\n", ""
            )
        except Exception as e:
            self.logger.warning(
                f"Error occurred while parsing hallucination data generation output: {str(e)}"
            )
            self.logger.debug(
                f"hallucination data generation output: , {hlcntn_data_generation_output}"
            )
            non_hlcntn_answer, hlcntn_answer, hlcntn_part = "", "", ""
        return non_hlcntn_answer, hlcntn_answer, hlcntn_part

    def parse_hlcntn_extraction_output(self, hlcntn_extraction_output: str) -> list:
        """
        Parses the hallucination extraction output and returns the hallucination index list.

        Args:
            hlcntn_extraction_output (str): The output string from the hallucination extraction process.

        Returns:
            list: A list of boolean values indicating the hallucination index.
        """
        try:
            hlcntn_index = eval(
                hlcntn_extraction_output.split("Plain Boolean List:")[-1]
                .strip()
                .replace("true", "True")
                .replace("false", "False")
            )
        except Exception as e:
            self.logger.warning(
                f"Error occurred while parsing hallucination triplet extraction output: {str(e)}"
            )
            self.logger.debug(
                f"hallucination extraction input/output: , {hlcntn_extraction_output}"
            )
            hlcntn_index = [False] * len(hlcntn_extraction_output)
        return hlcntn_index
