from model.hallucination_data_generator.hallucination_data_generator import *
from utils.utils import *
from pipeline import *


class LLMMultiShotHallucinationDataGenerator(
    HallucinationDataGenerator, PipelineDemonstration
):
    """
    This class contains hallucination pipelines to generate hallucination data.
        The hallucination dataset looks like:
                "triplets":[triplet_1, triplet_2, ...]

        Methods:

        __init__(self, config: dict)
            Initializes the data generator with the given configuration.

        hlcntn_directions(self)
            Property that returns a list of directions for hallucination.

        get_model_prompt(self, reference_documents, question, **kwargs)
            Generates a model prompt for hallucinated data generation.

        hlcntn_prompt_input_formatter(self, reference_documents, question)
            Formats the input for the hallucination prompt.

        get_hlcntn_triplet_extraction_prompt(self, non_hallucinated_answer, generated_answer, non_hallucinated_triplets, answer_triplets)
            Generates a prompt for extracting triplets from hallucinated data.

        hlcntn_triplet_extraction_input_formatter(self, non_hallucinated_answer, generated_answer, non_hallucinated_triplets, answer_triplets)
            Formats the input for the hallucination triplet extraction prompt.

        generate_hlcntn_data_from_original_dataset(self, original_dataset, triplet_generator)
            Generates hallucination data from the original dataset using a triplet generator.

        parse_hlcntn_data_generation_output(self, hlcntn_data_generation_output)
            Parses the output from the hallucinated data generation.

        get_hlcntn_triplet_index(self, generated_non_hlcntn_answer, generated_hlcntn_answer, non_hlcntn_triplets, hlcntn_triplets)
            Gets the list of boolean indicating which triplets are the hallucinated triplet.

        validate_and_parse_hlcntn_extraction_output(self, hlcntn_extraction_output)
            Parses the output from the hallucination triplet extraction.
    """

    def __init__(self, config: dict, logger: logging.Logger):
        HallucinationDataGenerator.__init__(self, config, logger)
        PipelineDemonstration.__init__(self, config)

    @property
    def hlcntn_directions(self):
        return [
            "Follow the instructions",
        ]

    def get_model_prompt(self, reference_documents: list, question: str, **kwargs):
        """
        Generates a model prompt based on the provided reference documents and question.

        Args:
            reference_documents (list of str): A list of documents to be used as references for generating the prompt.
            question (str): The question for which the prompt is being generated.
            **kwargs: Additional keyword arguments that may be used by the method.

        Returns:
            str: The generated model prompt.
        """
        return self.message_list_template[
            "n_shot_hallucinated_data_generation_test"
        ].invoke(
            input=self.hlcntn_prompt_input_formatter(reference_documents, question)
        )

    def hlcntn_prompt_input_formatter(self, reference_documents: list, question: str):
        """
        Formats the input for the hallucination prompt.

        Args:
            reference_documents (list of str): A list of reference documents to be included in the prompt.
            question (str): The question to be included in the prompt.

        Returns:
            dict: A dictionary containing the formatted prompt input with the following keys:
                - "directions" (str): Directions for the prompt, joined by newline characters.
                - "reference_documents" (str): Reference documents joined by newline and hyphen.
                - "question" (str): The question to be included in the prompt.
                - "examples" (list): A list of example data generated by the `get_demo_data_by_idx` method.
        """

        result = {
            "directions": "\n".join(self.hlcntn_directions),
            "reference_documents": "\n- ".join(reference_documents),
            "question": question,
            "examples": self.get_demo_data_by_idx(
                9999,  # need to change here
                num_samples=self.config.model.hallucination_data_generator.num_shot,
                demo_type="hallucinated_data_generation",
            ),
        }
        return result

    def get_hlcntn_triplet_extraction_prompt(
        self,
        non_hallucinated_answer: str,
        generated_answer: str,
        non_hallucinated_triplets: list,
        answer_triplets: list,
    ):
        """
        Generates a hallucination triplet extraction prompt.

        Args:
            non_hallucinated_answer (str): The non-hallucinated answer text.
            generated_answer (str): The generated answer text.
            non_hallucinated_triplets (list): A list of triplets extracted from the non-hallucinated answer.
            answer_triplets (list): A list of triplets extracted from the generated answer.

        Returns:
            str: The formatted prompt for hallucination triplet extraction.
        """
        return self.message_list_template[
            "hallucination_triplet_extraction_test"
        ].invoke(
            input=self.hlcntn_triplet_extraction_input_formatter(
                non_hallucinated_answer=non_hallucinated_answer,
                generated_answer=generated_answer,
                non_hallucinated_triplets=non_hallucinated_triplets,
                answer_triplets=answer_triplets,
            )
        )

    def hlcntn_triplet_extraction_input_formatter(
        self,
        non_hallucinated_answer: str,
        generated_answer: str,
        non_hallucinated_triplets: list,
        answer_triplets: list,
    ):
        """
        Formats the input for hallucination triplet extraction prompt.

        Args:
            non_hallucinated_answer (str): The non-hallucinated answer.
            generated_answer (str): The generated (potentially hallucinated) answer.
            non_hallucinated_triplets (list): A list of triplets from the non-hallucinated answer.
            answer_triplets (list): A list of triplets from the generated answer.

        Returns:
            dict: A dictionary containing the formatted input with keys:
                - "answer": The non-hallucinated answer.
                - "hallucinated_answer": The generated answer.
                - "answer_triplets": The string representation of the answer triplets.
        """
        return {
            "answer": non_hallucinated_answer,
            "hallucinated_answer": generated_answer,
            "answer_triplets": str(answer_triplets),
        }

    def generate_hlcntn_data_from_original_dataset(
        self, original_dataset, triplet_generator
    ):
        """
        Generates hallucination data from the original dataset using a triplet generator.

        Args:
            original_dataset (dict): The original dataset containing reference documents and questions.
            triplet_generator (object): An object capable of generating triplets from answers.

        Returns:
            dict: A dictionary containing the following keys:
                - "generated_non_hlcntn_answer" (str): The generated non-hallucinated answer.
                - "generated_hlcntn_answer" (str): The generated hallucinated answer.
                - "generated_answer" (str): The raw output from the model invocation.
                - "non_hlcntn_triplets" (list): Triplets generated from the non-hallucinated answer.
                - "answer_triplets" (list): Triplets generated from the hallucinated answer.
                - "hlcntn_triplet_index" (list): The list of boolean values indicating which triplets are hallucinated.
                - "hlcntn_part" (str): The part of the answer identified as hallucinated.
                - "reference_documents" (list): The reference documents from the original dataset.
        """
        hlcntn_generation_prompt = self.get_model_prompt(
            reference_documents=original_dataset["reference_documents"],
            question=original_dataset["question"],
        )
        hlcntn_data_generation_output = self.model.invoke(
            hlcntn_generation_prompt
        ).content

        generated_non_hlcntn_answer, generated_hlcntn_answer, hlcntn_part = (
            self.parse_hlcntn_data_generation_output(hlcntn_data_generation_output)
        )

        non_hlcntn_triplets = triplet_generator.forward(generated_non_hlcntn_answer)
        hlcntn_triplets = triplet_generator.forward(generated_hlcntn_answer)

        hlcntn_triplet_index = self.get_hlcntn_triplet_index(
            generated_non_hlcntn_answer=generated_non_hlcntn_answer,
            generated_hlcntn_answer=generated_hlcntn_answer,
            non_hlcntn_triplets=non_hlcntn_triplets,
            hlcntn_triplets=hlcntn_triplets,
        )

        return {
            "generated_non_hlcntn_answer": generated_non_hlcntn_answer,
            "generated_hlcntn_answer": generated_hlcntn_answer,
            "generated_answer": hlcntn_data_generation_output,
            "non_hlcntn_triplets": non_hlcntn_triplets,
            "answer_triplets": hlcntn_triplets,  # todo
            "hlcntn_triplet_index": hlcntn_triplet_index,
            "hlcntn_part": hlcntn_part,
            "hlcntn_generation_prompt": str(hlcntn_generation_prompt),
            "reference_documents": original_dataset["reference_documents"],
        }

    def parse_hlcntn_data_generation_output(self, hlcntn_data_generation_output):
        """
        Parses the hallucination data generation output and extracts the non-hallucinated answer,
        hallucinated answer, and hallucinated details.

        Args:
            hlcntn_data_generation_output (str): The output string from the hallucination data generation process.

        Returns:
            tuple: A tuple containing:
                - non_hlcntn_answer (str): The non-hallucinated answer extracted from the output.
                - hlcntn_answer (str): The hallucinated answer extracted from the output.
                - hlcntn_part (str): The hallucinated details extracted from the output.
        """
        answer_part = hlcntn_data_generation_output.split("Hallucinated Details:")[0]
        hlcntn_part = hlcntn_data_generation_output.split("Hallucinated Details:")[1]
        hlcntn_answer = answer_part.split("Hallucinated Answer:\n")[2].replace("*", "")
        non_hlcntn_answer = answer_part.split("Hallucinated Answer:\n")[1].replace(
            "Non-Hallucinated Answer:\n", ""
        )
        return non_hlcntn_answer, hlcntn_answer, hlcntn_part

    def get_hlcntn_triplet_index(
        self,
        generated_non_hlcntn_answer,
        generated_hlcntn_answer,
        non_hlcntn_triplets,
        hlcntn_triplets,
    ):
        """
        Generates the boolean list which indicates whether each triplet in the answer is hallucinated.

        Args:
            generated_non_hlcntn_answer (str): The generated non-hallucinated answer.
            generated_hlcntn_answer (str): The generated hallucinated answer.
            non_hlcntn_triplets (list): A list of non-hallucinated triplets.
            hlcntn_triplets (list): A list of hallucinated triplets.

        Returns:
            list: A boolean list of the same length as the answer triplets, where True indicates a hallucinated triplet.
        """
        hlcntn_generation_prompt = self.get_hlcntn_triplet_extraction_prompt(
            non_hallucinated_answer=generated_non_hlcntn_answer,
            generated_answer=generated_hlcntn_answer,
            non_hallucinated_triplets=non_hlcntn_triplets,
            answer_triplets=hlcntn_triplets,
        )
        hlcntn_extraction_output = self.model.invoke(hlcntn_generation_prompt).content
        hlcntn_index = self.validate_and_parse_hlcntn_extraction_output(
            hlcntn_extraction_output, hlcntn_generation_prompt
        )
        return hlcntn_index

    def validate_and_parse_hlcntn_extraction_output(
        self, hlcntn_extraction_output, hlcntn_generation_prompt
    ):
        """
        Parses the hallucination extraction output and returns the hallucination index list.

        Args:
            hlcntn_extraction_output (str): The output string from the hallucination extraction process.

        Returns:
            list: A list of boolean values indicating the hallucination index.
        """
        try:
            hlcntn_index = eval(
                hlcntn_extraction_output.split("Plain Boolean List:")[-1]
                .strip()
                .replace("true", "True")
                .replace("false", "False")
            )
        except Exception as e:
            self.logger.warning(
                f"Error occurred while parsing hallucination triplet extraction output: {str(e)}"
            )
            self.logger.debug(
                f"hallucination extraction input/output: , {hlcntn_extraction_output}"
            )
            hlcntn_index = [False] * len(hlcntn_extraction_output)
        return hlcntn_index
