from model.answer_generator.answer_generator import *
from pipeline import *


class BaseLLMAnswerGenerator(AnswerGenerator, PipelinePrompt):
    """
    BaseLLMAnswerGenerator is a class that inherits from AnswerGenerator and PipelinePrompt.
    It is designed to generate answers based on a given configuration and a list of messages.

    Attributes:
        directions (list): A list of directions to guide the answer generation process.

    Methods:
        __init__(config: dict):
            Initializes the BaseLLMAnswerGenerator with the provided configuration.

        forward(message_list: list) -> str:
            Processes a list of messages and returns the generated content.

        get_model_prompt(reference_documents: List[str], question: str, **kwargs):
            Generates a prompt for the model based on the reference documents and the question.

        question_input_formatter(reference_documents: List[str], question: str):
            Formats the input for the question, including directions, reference documents, and the question itself.
    """

    def __init__(self, config: dict, logger: logging.Logger):
        AnswerGenerator.__init__(self, config, logger)
        PipelinePrompt.__init__(self, config)

    @property
    def directions(self):
        # optional
        return [
            "Please answer the following question",
            "Answer the question with the information provided in the reference documents",
            "If reference documents do not contains the evidence for answer, just answer there is no evidence",
        ]

    def forward(self, message_list: list) -> str:
        """
        Args:
            message_list (list): A list of messages to be processed by the model.

        Returns:
            str: The content generated by the model.
        """
        return self.model.invoke(message_list).content

    def get_model_prompt(self, reference_documents: List[str], question: str, **kwargs):

        return self.message_list_template["answer_generation"].invoke(
            input=self.question_input_formatter(reference_documents, question)
        )

    def question_input_formatter(self, reference_documents: List[str], question: str):
        return {
            "directions": "\n".join(self.directions),
            "reference_documents": "\n- ".join(reference_documents),
            "question": question,
        }
